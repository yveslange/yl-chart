// Generated by CoffeeScript 1.7.1
(function() {
  var AgChart, agChart, data, genData, tooltip;

  data = [4, 8, 15, 16, 23, 42];

  AgChart = (function() {
    function AgChart(args) {
      this._CONF = {
        canvas: {
          render: 'circle',
          selector: void 0,
          width: 600.0,
          height: 400.0,
          padding: [0, 0]
        },
        point: {
          r: 4,
          color: "#5e5e5e",
          stroke: {
            color: "red",
            width: 4
          }
        },
        ticks: {
          xSize: void 0,
          ySize: void 0
        }
      };
      this._SERIES = this.prepareSeries(args.series);
      this._CANVAS = void 0;
      this._TOOLTIP = void 0;
      this._SCALE = {
        x: void 0,
        y: void 0
      };
      this.defaultConfig(args.config);
      this.computePadding();
      this.computeScales();
      return;
    }

    AgChart.prototype.defaultConfig = function(c) {
      var setConf;
      if (c == null) {
        c = {};
      }
      setConf = function(conf, obj) {
        var k, _ref, _results;
        if (obj != null) {
          _results = [];
          for (k in obj) {
            if (typeof obj[k] === 'object') {
              _results.push(setConf(conf[k], obj[k]));
            } else {
              _results.push(conf[k] = (_ref = obj[k]) != null ? _ref : conf[k]);
            }
          }
          return _results;
        }
      };
      setConf(this._CONF, c);
      return this._CONF;
    };

    AgChart.prototype.toString = function() {
      console.log("Canvas in " + this._CONF.selector);
      console.log("Config", this._CONF);
      console.log("Datas:", this._SERIES);
    };

    AgChart.prototype.computePadding = function() {
      var pad;
      pad = this._CONF.point.r + this._CONF.point.stroke.width / 2.0;
      if (this._CONF.canvas.padding === 'auto') {
        return this._CONF.canvas.padding = [pad, pad];
      }
    };

    AgChart.prototype.maxX = function() {
      var max, point, serie, _i, _j, _len, _len1, _ref, _ref1;
      max = Number.MIN_VALUE;
      _ref = this._SERIES;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        serie = _ref[_i];
        _ref1 = serie.data;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          point = _ref1[_j];
          if (point.x > max) {
            max = point.x;
          }
        }
      }
      return max;
    };

    AgChart.prototype.maxY = function() {
      var max, point, serie, _i, _j, _len, _len1, _ref, _ref1;
      max = Number.MIN_VALUE;
      _ref = this._SERIES;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        serie = _ref[_i];
        _ref1 = serie.data;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          point = _ref1[_j];
          if (point.y > max) {
            max = point.y;
          }
        }
      }
      return max;
    };

    AgChart.prototype.computeScales = function() {
      var maxX, maxY, _canvas, _pad;
      _canvas = this._CONF.canvas;
      _pad = _canvas.padding;
      maxX = this.maxX();
      maxY = this.maxY();
      this._SCALE.width = d3.scale.linear().domain([0, maxX]).range([_pad[0], _canvas.width - _pad[0]]);
      return this._SCALE.height = d3.scale.linear().domain([0, maxY]).range([_canvas.height - _pad[1], _pad[1]]);
    };

    AgChart.prototype.createCanvas = function() {
      if (this._CONF.canvas.selector == null) {
        throw "No selector defined";
      }
      return this._CANVAS = d3.select(this._CONF.canvas.selector).append('svg').attr('width', this._CONF.canvas.width).attr('height', this._CONF.canvas.height);
    };

    AgChart.prototype.renderXAxis = function() {
      var axisX, height, padding;
      padding = this._CONF.canvas.padding[1];
      height = this._CONF.canvas.height;
      axisX = d3.svg.axis().scale(this._SCALE.width);
      if (this._CONF.ticks.xSize === 'full') {
        axisX.tickSize(height - padding * 2);
      } else if (this._CONF.ticks.xSize) {
        this._CONF.ticks.axisX.tickSize(this._CONF.ticks.xSize);
      }
      return this._CANVAS.append("g").attr("transform", "translate(0," + padding + ")").attr("class", "axis x").call(axisX);
    };

    AgChart.prototype.renderYAxis = function() {
      var axisY, padding, width;
      padding = this._CONF.canvas.padding[0];
      width = this._CONF.canvas.width;
      axisY = d3.svg.axis().scale(this._SCALE.height).orient("left");
      if (this._CONF.ticks.ySize === 'full') {
        axisY.tickSize(-width + padding * 2);
      } else if (this._CONF.ticks.ySize) {
        this._CONF.ticks.axisY.tickSize(this._CONF.ticks.ySize);
      }
      return this._CANVAS.append("g").attr("transform", "translate(" + padding + ", 0)").attr("class", "axis y").call(axisY);
    };

    AgChart.prototype.prepareSeries = function(data) {
      var point, serie, _i, _j, _len, _len1, _ref;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        serie = data[_i];
        _ref = serie.data;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          point = _ref[_j];
          if (serie.config != null) {
            point.config = serie.config;
          }
        }
      }
      return data;
    };

    AgChart.prototype.renderPoints = function() {
      var scaleH, scaleW, series, _canvas, _conf, _tooltip, _tooltipCallback;
      _conf = this._CONF;
      _canvas = _conf.canvas;
      scaleW = this._SCALE.width;
      scaleH = this._SCALE.height;
      _tooltipCallback = _conf.tooltip;
      _tooltip = this._TOOLTIP;
      if (_canvas.render === 'dots') {
        series = this._CANVAS.selectAll(".series").data(this._SERIES).enter().append("g").attr("class", "series").attr("id", function(s, i) {
          return "" + i;
        }).attr("title", function(s) {
          return s.name;
        });
        return series.selectAll(".circle").data(function(d) {
          return d.data;
        }).enter().append("circle").attr('cx', function(d) {
          return scaleW(d.x);
        }).attr('cy', function(d) {
          return scaleH(d.y);
        }).attr('r', (function(d) {
          var _ref, _ref1;
          return (_ref = (_ref1 = d.config) != null ? _ref1.r : void 0) != null ? _ref : _conf.point.r;
        })).attr('stroke', (function(d) {
          var _ref, _ref1, _ref2;
          return (_ref = (_ref1 = d.config) != null ? (_ref2 = _ref1.stroke) != null ? _ref2.color : void 0 : void 0) != null ? _ref : _conf.point.stroke.color;
        })).attr('stroke-width', (function(d) {
          var _ref, _ref1, _ref2;
          return (_ref = (_ref1 = d.config) != null ? (_ref2 = _ref1.stroke) != null ? _ref2.width : void 0 : void 0) != null ? _ref : _conf.point.stroke.width;
        })).attr('fill', (function(d) {
          var _ref, _ref1;
          return (_ref = (_ref1 = d.config) != null ? _ref1.color : void 0) != null ? _ref : _conf.point.color;
        })).on('mouseover', function(d) {
          _tooltip.html(_tooltipCallback(this, d));
          _tooltip.transition().duration(200).style("opacity", 0.9);
          _tooltip.style("left", d3.event.pageX + _conf.point.stroke.width, +'px').style("top", d3.event.pageY + 'px');
          return _tooltip;
        }).on('mouseout', function() {
          return _tooltip.transition().duration(500).style("opacity", 0);
        });
      } else {
        throw "Unknown render value '" + _canvas.render + "'";
      }
    };

    AgChart.prototype.renderTooltip = function() {
      if (this._TOOLTIP == null) {
        return this._TOOLTIP = d3.select("body").append("div").attr('class', 'tooltip').style('opacity', 0);
      }
    };

    AgChart.prototype.render = function() {
      if (this._CANVAS == null) {
        this._CANVAS = this.createCanvas();
      }
      this.renderXAxis();
      this.renderYAxis();
      this.renderTooltip();
      return this.renderPoints();
    };

    return AgChart;

  })();

  tooltip = function(node, d) {
    var serieName;
    serieName = node.parentNode.getAttribute("title");
    return ("<div>" + serieName) + ("<div>" + d.x + " " + (d.y.toFixed(2)) + "</div>");
  };

  genData = function(len, inter) {
    var els, i, _i, _ref;
    if (inter == null) {
      inter = 1;
    }
    els = [];
    for (i = _i = 0, _ref = len - 1; inter > 0 ? _i <= _ref : _i >= _ref; i = _i += inter) {
      els.push({
        x: i,
        y: Math.random() * 100
      });
    }
    return els;
  };

  agChart = new AgChart({
    config: {
      canvas: {
        render: "dots",
        selector: '#chart1',
        padding: [30, 30]
      },
      tooltip: tooltip,
      point: {
        r: 3,
        color: "#efefef",
        stroke: {
          width: 3,
          color: "#44A0FF"
        }
      },
      ticks: {
        ySize: "full",
        xSize: "full"
      }
    },
    series: [
      {
        name: "Serie 1",
        data: genData(1000),
        config: {
          r: 2,
          color: "#1256ef",
          stroke: {
            width: 2,
            color: "#ff0000"
          }
        }
      }, {
        name: "Serie 2",
        data: genData(100),
        config: {
          r: 4,
          stroke: {
            width: 1
          }
        }
      }
    ]
  });

  agChart.render();

  window.agChart = agChart;

}).call(this);
