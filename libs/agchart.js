// Generated by CoffeeScript 1.7.1
(function() {
  var AgChart, agChart, data;

  data = [4, 8, 15, 16, 23, 42];

  AgChart = (function() {
    function AgChart(args) {
      this._CONF = {
        canvas: {
          render: 'circle',
          selector: void 0,
          width: 600.0,
          height: 400.0,
          padding: [0, 0]
        },
        point: {
          r: 4,
          color: "#5e5e5e",
          stroke: {
            color: "red",
            width: 4
          }
        },
        ticks: {
          xSize: void 0,
          ySize: void 0
        }
      };
      this._DATA = args.data;
      this._CANVAS = void 0;
      this._SCALE = {
        x: void 0,
        y: void 0
      };
      this.defaultConfig(args.config);
      this.computePadding();
      this.computeScales();
      return;
    }

    AgChart.prototype.defaultConfig = function(c) {
      var setConf;
      if (c == null) {
        c = {};
      }
      setConf = function(conf, obj) {
        var k, _ref, _results;
        if (obj != null) {
          _results = [];
          for (k in obj) {
            if (typeof obj[k] === 'object') {
              _results.push(setConf(conf[k], obj[k]));
            } else {
              _results.push(conf[k] = (_ref = obj[k]) != null ? _ref : conf[k]);
            }
          }
          return _results;
        }
      };
      setConf(this._CONF, c);
      return this._CONF;
    };

    AgChart.prototype.toString = function() {
      console.log("Canvas in " + this._CONF.selector);
      console.log("Config", this._CONF);
      console.log("Datas:", this._DATA);
    };

    AgChart.prototype.computePadding = function() {
      var pad;
      pad = this._CONF.point.r + this._CONF.point.stroke.width / 2.0;
      if (this._CONF.canvas.padding === 'auto') {
        return this._CONF.canvas.padding = [pad, pad];
      }
    };

    AgChart.prototype.computeScales = function() {
      var maxX, maxY, _canvas, _pad;
      _canvas = this._CONF.canvas;
      _pad = _canvas.padding;
      maxX = d3.max(this._DATA, function(a) {
        return a[0];
      });
      maxY = d3.max(this._DATA, function(a) {
        return a[1];
      });
      this._SCALE.width = d3.scale.linear().domain([0, maxX]).range([_pad[0], _canvas.width - _pad[0]]);
      return this._SCALE.height = d3.scale.linear().domain([0, maxY]).range([_canvas.height - _pad[1], _pad[1]]);
    };

    AgChart.prototype.initValues = function() {
      return {
        xStart: this._CONF.canvas.padding[0],
        yStart: this._CONF.canvas.height - this._CONF.canvas.padding[1],
        xEnd: this._CONF.canvas.width - this._CONF.canvas.padding[0],
        yEnd: this._CONF.canvas.padding[1]
      };
    };

    AgChart.prototype.createCanvas = function() {
      if (this._CONF.canvas.selector == null) {
        throw "No selector defined";
      }
      return this._CANVAS = d3.select(this._CONF.canvas.selector).append('svg').attr('width', this._CONF.canvas.width).attr('height', this._CONF.canvas.height);
    };

    AgChart.prototype.renderXAxis = function() {
      var axisX, height, padding;
      padding = this._CONF.canvas.padding[1];
      height = this._CONF.canvas.height;
      axisX = d3.svg.axis().scale(this._SCALE.width);
      if (this._CONF.ticks.xSize === 'full') {
        axisX.tickSize(height - padding * 2);
      } else if (this._CONF.ticks.xSize) {
        this._CONF.ticks.axisX.tickSize(this._CONF.ticks.xSize);
      }
      return this._CANVAS.append("g").attr("transform", "translate(0," + padding + ")").attr("class", "axis x").call(axisX);
    };

    AgChart.prototype.renderYAxis = function() {
      var axisY, padding, width;
      padding = this._CONF.canvas.padding[0];
      width = this._CONF.canvas.width;
      axisY = d3.svg.axis().scale(this._SCALE.height).orient("left");
      if (this._CONF.ticks.ySize === 'full') {
        axisY.tickSize(-width + padding * 2);
      } else if (this._CONF.ticks.ySize) {
        this._CONF.ticks.axisY.tickSize(this._CONF.ticks.ySize);
      }
      return this._CANVAS.append("g").attr("transform", "translate(" + padding + ", 0)").attr("class", "axis y").call(axisY);
    };

    AgChart.prototype.renderPoints = function() {
      var scaleH, scaleW, _canvas;
      _canvas = this._CONF.canvas;
      scaleW = this._SCALE.width;
      scaleH = this._SCALE.height;
      if (_canvas.render === 'dots') {
        return this._CANVAS.selectAll('circle').data(this._DATA).enter().append('circle').attr('cx', function(d) {
          return scaleW(d[0]);
        }).attr('cy', function(d) {
          return scaleH(d[1]);
        }).attr('r', this._CONF.point.r).attr('stroke', this._CONF.point.stroke.color).attr('stroke-width', this._CONF.point.stroke.width).attr('fill', this._CONF.point.color);
      } else {
        throw "Unknown render value '" + _canvas.render + "'";
      }
    };

    AgChart.prototype.render = function() {
      if (this._CANVAS == null) {
        this._CANVAS = this.createCanvas();
      }
      this.renderXAxis();
      this.renderYAxis();
      return this.renderPoints();
    };

    return AgChart;

  })();

  agChart = new AgChart({
    config: {
      canvas: {
        render: "dots",
        selector: '#chart1',
        padding: [30, 30]
      },
      point: {
        r: 3,
        color: "#efefef",
        stroke: {
          width: 3,
          color: "#44A0FF"
        }
      },
      ticks: {
        ySize: "full",
        xSize: "full"
      }
    },
    data: [[0, 0], [1, 0], [15, 20], [20, 14.2]]
  });

  agChart.render();

}).call(this);
