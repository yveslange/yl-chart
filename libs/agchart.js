// Generated by CoffeeScript 1.7.1
(function() {
  var AgChart, agChart, data;

  data = [4, 8, 15, 16, 23, 42];

  AgChart = (function() {
    function AgChart(args) {
      this._CONF = {
        canvas: {
          render: 'circle',
          selector: null,
          width: 300.0,
          height: 200.0,
          padding: [0, 0]
        },
        point: {
          r: 4,
          color: "#5e5e5e",
          stroke: {
            color: "red",
            width: 4
          }
        }
      };
      this.defaultConfig(args.config);
      this._DATA = args.data;
      this._CANVAS = null;
      this.computePadding();
      return;
    }

    AgChart.prototype.defaultConfig = function(c) {
      var setConf;
      if (c == null) {
        c = {};
      }
      setConf = function(conf, obj) {
        var k, _ref, _results;
        if (obj != null) {
          _results = [];
          for (k in obj) {
            if (typeof obj[k] === 'object') {
              _results.push(setConf(conf[k], obj[k]));
            } else {
              _results.push(conf[k] = (_ref = obj[k]) != null ? _ref : conf[k]);
            }
          }
          return _results;
        }
      };
      setConf(this._CONF, c);
      return this._CONF;
    };

    AgChart.prototype.toString = function() {
      console.log("Canvas in " + this._CONF.selector);
      console.log("Config", this._CONF);
      console.log("Datas:", this._DATA);
    };

    AgChart.prototype.computePadding = function() {
      var pad;
      pad = this._CONF.point.r + this._CONF.point.stroke.width / 2.0;
      if (this._CONF.canvas.padding === 'auto') {
        return this._CONF.canvas.padding = [pad, pad];
      }
    };

    AgChart.prototype.createCanvas = function() {
      if (this._CONF.canvas.selector == null) {
        throw "No selector defined";
      }
      return this._CANVAS = d3.select(this._CONF.canvas.selector).append('svg').attr('width', this._CONF.canvas.width).attr('height', this._CONF.canvas.height);
    };

    AgChart.prototype.renderPoints = function() {
      var funX, funY, maxX, maxY, _canvas;
      _canvas = this._CONF.canvas;
      maxX = d3.max(this._DATA, function(a) {
        return a[0];
      });
      maxY = d3.max(this._DATA, function(a) {
        return a[1];
      });
      funX = function(d) {
        return d[0] * (_canvas.width - _canvas.padding[0] * 2) / maxX + _canvas.padding[0];
      };
      funY = function(d) {
        return _canvas.height - (d[1] * (_canvas.height - _canvas.padding[1] * 2) / maxY + _canvas.padding[1]);
      };
      if (_canvas.render === 'dots') {
        return this._CANVAS.selectAll('circle').data(this._DATA).enter().append('circle').attr('cx', funX).attr('cy', funY).attr('r', this._CONF.point.r).attr('stroke', this._CONF.point.stroke.color).attr('stroke-width', this._CONF.point.stroke.width).attr('fill', this._CONF.point.color);
      } else {
        throw "Unknown render value '" + _canvas.render + "'";
      }
    };

    AgChart.prototype.render = function() {
      if (this._CANVAS === null) {
        this._CANVAS = this.createCanvas();
      }
      return this.renderPoints();
    };

    return AgChart;

  })();

  agChart = new AgChart({
    config: {
      canvas: {
        render: "dots",
        selector: '#chart1',
        padding: 'auto'
      },
      point: {
        color: {
          stroke: "#44A0FF"
        }
      }
    },
    data: [[0, 0], [1, 0], [20, 14.2]]
  });

  agChart.render();

}).call(this);
